1) Getting Started -
Git is a Distributed Version Control System which saves the snapshot
It has SHA1 integrity and Local work is done
It has three phases - Modified(Changed file but not commited to database), Staged(Marked a modified file to go in next snapshot) and Commited(Data stored to local database .git)
Setup - 	git config --global user.name "Akash Dhanwar"
		git config --global user.email akash.dhanwar112@gmail.com
		git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"	---->	To specify favourite editor
		git config --global init.defaultBranch main	---->	Set default branch name
		git config --list	---->	Check settings
		git help config		---->	Get help of a command
		

2) Git Basics -
*	git init					---->		Creating a git repo
*	git add LICENSE					---->		Staging a tracked/untracked file
*	git commit -m 'Initial project version'		---->		Commit
	git commit -am "msg"				---->		Stage and Commit
*	git clone <url> dirName				---->		Cloning a repo
*	git log --oneline				---->		logs
	git log -p -2					---->		--patch views logs with the things added or removed, that is the diff details also. -2 gives only last 										two commits
									--stat displays the differences at last in a much better way
									--graph in a graphical way
*	git ls-files					---->		List files in staging area
*	git status					---->		Check status
	git status -s					---->		Short status
*	git diff filename				---->		Difference between Working directory file and staging area file
										DESCRIPTION -
										diff --git A/Git.txt B/Git.txt 		- A is staging file and B is directory file
										index 279aee1..d40b054 100644  		- A's hash 279aee1, B's hash d40b054, 100644 is mode of 															file - 100 is file type and 644 is file permissions
										--- a/Git.txt				- Source file(staging file) A missing some lines
										+++ b/Git.txt				- Destinaton file(Directory file) extra line additions
										@@ -24,8 +24,8 @@ 			- -24 means lines missing in source(staging area) ans +24 is of directory file
	git diff HEAD filename				---->		Difference between Working Directory and last commit in local repository(HEAD)
 	git diff --staged HEAD filename			---->		Difference between staged file and last commit
	git diff --cached HEAD filename			---->		Difference between staged file and last commit
	git diff commitid filename			---->		Differences between Working Directory and specific commitid
	git diff --cached commitid filename		---->		Differences between Staging file and specific commitid
	git diff commitid1 commitid2 filename		---->		Differences between two commits
	git diff branch1 branch2			---->		Difference between two branches
	git diff master origin/master			---->		Differences between local and remote repository
*	cat .gitignore					---->		Used to ignore some files
	
REMOVING/RENAMING-
*	git rm filename					---->		Deletes the file from directory and staging
	git rm filename -f -r				---->		Deletes the file from directory and staging
	git rm filename --cached			---->		Removes only from staging area
	rm filename					---->		Removes only from directory
*	git mv filename newfilename			---->		Rename/Move a file. It can be done by combining changing a file name and git rm oldfilename

UNDOING CHANGES-
*	"git add filename" then "git commit --amend"	---->		amend the previous commit adding the data or new message to previous commit 
*	git checkout filename				---->		Discard changes from Working Directory
*	git restore filename				---->		Discard changes from Working Directory
	git restore --staged filename			---->		Unstage but keep modified changes in Working Directory
*	git reset HEAD filename				---->		Unstage but keep modified changes in Working Directory
	git reset HEAD~1				---->		Removes last commit or head commit and uncommited files are in Working Directory
									--mixed removes the commit and keeps code in Working Directory(Default)
									--soft removes the commit and keeps code in staging area
									--hard removes the commit and also discards the file from Working Directory
									Note that if we push, then reset and then ppush again then it will throw conflict. Hence use revert
*	git revert commitid				---->		Revert a commitid and if we push, it creates an extra commit
	 
	





